// Рассматриваемые темы:
// Переменные, объявление, инициализация переменных

#pragma once

#include <iostream>
#include <cstring>
using namespace std;

namespace Variables {
    int main() {
        // Переменные - это ячейка памяти, которой присвоенно какое-то символьное имя.
        // Сделано это для того, чтобы программисту не помнить адреса каждой ячейки памяти,
        // с которой ему нужно работать. Не говоря уж о том, что каждый раз при запуске программы,
        // адреса ячеек меняются в зависимости от того, куда в ОЗУ была загружена программа

        // Объявление переменной - в памяти вы выделяете место под ваши данные и
        // присваиваете этому участку памяти какое-то имя

        int a;  // Здесь объявляется переменная целочисленного типа данных.
        // Имя этой переменной - "а"

        // Объявить переменную - это только зарезервировать под нее память
        // Никакого вразумительного значения в этой памяти не хранится.
        // Принято считать, что после обявления переменной в памяти хранится "мусор" -
        // случайное значение, которое было в памяти

        // cout << a << endl; // Выведется что-то страшное
        // В VS эта строчка вызывает ошибку "попытка использования неинициализированной переменной".
        // VS - пытается уберечь вас от выстрела в ногу

        // Впрочем, некоторые языки программирования умеют записывать что-то более
        // вразумительное в память при создании переменной
        // Например, после создания переменной логического типа данных в память
        // по умолчанию записывается значение false

        bool f;
        // cout << f << endl; // Выведется 0 - что в языке С++ эквивалентно false
        // В VS эта строчка вызывает ошибку "попытка использования неинициализированной переменной".
        // VS - пытается уберечь вас от выстрела в ногу

        // Для удобства создания программ язык программирования научили обрабатывать
        // ячейки памяти по-разному. Т.е. по-разному интерпертировать нули и единицы
        // в памяти.

        // Например, нолики и единички составляющие число 65 могут быть
        // как целочисленным числом 65, так и символом с кодом 65,
        // т.е. латинской буквой A

        int b;
        int c;
        b = 65; // Инициализация переменной b
        c = 65; // Инициализация переменной с

        // Кстати,
        // инициализация - это процесс присвоения переменной какого-то значения

        cout << b << endl; // Выведется число 65
        cout << c << endl; // Выведется символ 'A'

        // Не смотря на то, что переменным b и c было присвоено одно и то же число,
        // на экран вывелась разная информация: в одном случае число, в другом - символ
        // Все дело в том, что эти 2 переменные имеют разные ТИПЫ ДАННЫХ

        // Тип данных - это инструкция программе, как обрабатывать той или иной кусок в памяти
        // (а в памяти вообще хранятся только числа, причем в двочином виде)

        // Объявление и инициализацию можно совмещать
        float d = 2.5;
        double e = 3.4;

        // ВАЖНО!
        // Считается обязательным давать переменным вразумительные имена,
        // чтобы только по самому имени переменной было понятно, для чего она создана

        // Например, переменные счетчики называют
        int i;
        int j;

        // Чтобы посчитать что-то, то используют имя
        int count;

        // Для символов
        /* char */ c; // имеется в виду, что c - сокращение от character - символ
        // вообще привыкайте, что знать английский язык нужно на уровне "читать"-"писать" как минимум

        // строки
        char* str1;
        string str2;

        // ну и т.д.
        bool flag;
        bool isGood;
        bool isToFinish;
        int sum;
        double mult; // mult - от multiply, т.е. результат перемножения
        float part; // part - доля
        int** matrix; // матрица
        int* array; // массив
        char* buf; // буфер
        int min; // минимальное значение
        int max; // максимальное значение

        return 0;
    }
}
