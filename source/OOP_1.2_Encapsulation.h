// Рассматриваемые темы:
// Инкапсуляция

#pragma once

#include <iostream>
using namespace std;

namespace Encapsulation
{
    // Зачем нужны публичные и приватные поля?
    // (Кстати, есть еще модификатор protected, но о нем немного позже)

    // Считается, что вне класса находится жестокий и злой мир,
    // а класс - маленький и беззащитный.
    // Чтобы защитить свой нежный внутренний мир, класс прячет от внешнего мира
    // все свои "потроха", чтобы кто-то случайно или намеренно не сломал
    // информацию внутри класса.

    // Такой механизм называется ИНКАПСУЛЯЦИЕЙ
    // Инкапсуляция - сокрытие сложности и внутренней структуры класса.

    // Если серьезно, то класс представляется в виде "черного ящика":
    // какой алгоритм скрыт в нем, как класс работает, какие поля в нем есть - 
    // недопустимо знать пользователю, а тем более иметь возможость изменять
    // информацию в классе напрямую.

    // Все это делается из рассчета обспечения безопасности.

    // По принципу инкапсуляции принято все поля делать приватными,
    // а доступ к полям организовывать с помощью методов.

    class Server
    {
        short ipAddress[4];

    public:

        // Метод, который позволяет задать значение поля, называют
        // сеттером (от англ. setter).
        void setIpAddress(short array[4])
        {
            // Внутри сеттера часто помещают проверки на корректность данных
            for (int i = 0; i < 4; i++)
                // проверяем, чтобы все части ip адреса лежали в диапазоне от 1 до 255
                if (array[i] < 1 || array[i] > 255)
                {
                    cout << "IP адрес некорректен!" << endl;
                    return;
                }

            // Если адрес корректен, то сохраняем его
            for (int i = 0; i < 4; i++)
                ipAddress[i] = array[i];
        }

        // Метод, который позволяет получить значение поля, называют
        // геттером (от англ. getter).
        short* getIpAddress()
        {
            return ipAddress;
        }
    };
}