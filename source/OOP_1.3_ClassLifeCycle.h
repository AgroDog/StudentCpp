// Рассматриваемые темы:
// Жизненный цикл объекта, конструктор, деструктор

#pragma once

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string.h>
#include <conio.h>

using namespace std;

namespace ClassLifeCycle
{
    // Принципы ООП старались как можно более приблизить реальную жизнь к программным моделям.
    // Поэтому у объектов есть так называемый "жизненный цикл".
    // Объекты рождаются, живут, выполняют свою роль, а затем умирают.

    // Когда объект "рождается" вызывается специальный метод класса - конструктор.
    // Когда объект "умирает" вызывается специальный метод класса - деструктор.

    class Human
    {
        int height;
        int weight;

    public:
        // Конструктор - метод класса, который имеет такое же имя, как и сам класс
        // Конструктор НЕ ИМЕЕТ возвращаемого значения, потому что результата работы
        // у конструктора - нет. Он что-то делает и все.
        Human()
        {
            cout << "Я родился! И ничего о себе не знаю." << endl;
        }

        // Конструктор можно перегружать 
        // (может существовать несколько конструкторов с разными параметрами)
        Human(int h)
        {
            height = h;
            cout << "Я родился! И я знаю свой рост! " << height << " см" << endl;
        }

        // Если лениво писать внутри конструктора
        // height = h;
        // weight = w;
        // то можно использовать краткую версию инициализатора
        Human(int h, int w) : height(h), weight(w) // <-- вот она, после ":"
        {
            cout << "Я родился! И я знаю свой рост и вес! " << height << " см " << weight << " кг" << endl;
        }

        // Деструктор - метод класса, который имеет такое же имя, как и сам класс с тильдой в начале
        // Деструктор также НЕ ИМЕЕТ возвращаемого значения
        ~Human()
        {
            cout << "RIP" << endl;
        }
    };

    void main()
    {
        Human* temp;
        { // <-- начало блока кода
            Human h1;
            Human h2(54);
            
            Human* h4 = new Human(50); // Это динамический объект
            temp = h4; // Сохраним адрес, чтобы не потерять
        } // <-- конец блока кода (все локальные переменные будут удалены)

        // Когда блок кода завершился, то переменные h1 и h2 были уничтожены,
        // а перед тем как их "убили" вызвался деструктор
        // Но удалятся только статические объекты. Обратите внимание, 
        // что надпись RIP на данном этапе появилась только 2 раза.

        // Создаем новый объект. Он будет существовать до конца программы
        Human h3(48, 3);

        // А вот сейчас мы "убьем" динамический объект
        delete temp; // Сейчас вызовется деструктор
    }

    // ИТОГ:

    // Конструктор вызывается сразу после создания объекта. 
    // Делать конструктор может ВСЕ ЧТО УГОДНО.
    // Но чаще всего его используют для начальной инициализации полей класса.

    // Деструктор вызывается непосредственно перед удалением объекта. 
    // Делать деструктор может ВСЕ ЧТО УГОДНО.
    // Но чаще всего его используют для высвобождения динамической памяти внутри класса.
}