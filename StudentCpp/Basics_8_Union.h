#ifndef AGENT_007_UNION
#define AGENT_007_UNION

#include <iostream>
using namespace std;

int main()
{
 union {
	// это - безымянное объединение. это означает,
	// что для обращения к элементу достаточно
	// лишь указать сам элемент.
	char oneByte;
	short twoBytes;
	int fourBytes;
	float eightBytes;
	double tenBytes;
 }

 // представьте, что ячейки ниже - конкретные ячейки памяти по 1 байт каждая.
 // ()()()()()()()()()()
 // при создании такого объединения система зарезервирует 10 байт,
 // так как самый большой элемент в объединении имеет размер 10 байт.
 // а теперь представьте, что мы выполнили операцию ниже:

 oneByte = 'c';

 // теперь мы имеем те же самые ячейки памяти:
 // ('c')()()()()()()()()()
 // важно понять, что это - точно те же ячейки памяти, что мы имели вначале.
 // теперь сделаем так.

 fourBytes = 4;

 // теперь уже имеем что-то вроде этого:
 // ((((4)))))()()()()()()
 // а теперь:

 twoBytes = 1;

 // наши ячейки:
 // ((1))()()()()()()()()
 // можно легко заметить закономерность - при задании одной из переменных в объединении
 // мы теряем все остальные из того же объединения.
 // в этом есть один большой плюс: оптимизация, особенно
 // если требуется максимальная экономия ресурсов оперативной памяти.

 // рассмотрим уже более реалистичный пример:

 union road {
	int meters;
	short miles;
 }

 // теперь это объединение именованное 'road'. это означает, что для доступа к эллементам
 // этого объединения нам необходимо использовать оператор точка [.] или оператор
 // стрелка [->].
 // суть примера в том, что если нам необходимо иметь выбор между тем, чтобы хранить длину
 // дороги в милях или метрах, то у нас есть вариант объявлять обе переменные и это
 // займет 4 байта для метров и 2 байта для миль, что в сумме дает 6 байт.
 // если мы заведем объединение, то программа потребует максимальный для известных типов
 // данных размер равный 4 байтам. 4 байта или 6 байт - эффективность 50%.

 // обращение к эллементам такого объединения, как уже говорилось, через операторы точка
 // или стрелка.

 road.meters = 134;

 cout << road.meters;

 // объединения довольно редко используются практически, но все же это экономия ресурсов.
 // и если вы хотите быть хорошими программистами (а вы хотите), то вам не стоит
 // принебрегать средствами оптимизации, особенно, когда они оправданы.
}

#endif
